import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { doLoginAPI } from "./loginAPI";
import type { AxiosResponse } from "axios";

export interface LoginData {
  username: string;
  password: string;
}

export interface LoginState {
  isLoggedIn: boolean;
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doLogin = createAsyncThunk(
  "login/doLogin",
  async (data: LoginData, { dispatch }) => {
    const res: AxiosResponse = await doLoginAPI(data);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const loginSlice = createSlice({
  name: "login",
  initialState: {
    isLoggedIn: false,
    jwtToken: "",
    status: "failed",
  },
  reducers: {
    onLogout(state: any) {
      state.isLoggedIn = false;
      state.jwtToken = "";
      state.status = "failed";
    },
    setIsLoggedInTrue(state: any) {
      state.isLoggedIn = true;
    },
    setIsLoggedInFalse(state: any) {
      state.isLoggedIn = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(doLogin.fulfilled, (state, action) => {
      try {
        //const decodedPayload: any = jwt(action.payload.jwtToken);
        state.jwtToken = action.payload.jwtToken;
        sessionStorage.setItem("token", action.payload.jwtToken);
      } catch (err) {
        console.log(err);
      }
      state.isLoggedIn = true;
      state.status = "success";
    });
    builder.addCase(doLogin.pending, (state) => {
      state.status = "loading";
    });
    builder.addCase(doLogin.rejected, (state) => {
      state.status = "failed";
    });
  },
});

export const { setIsLoggedInTrue, setIsLoggedInFalse } = loginSlice.actions;

export default loginSlice.reducer;
