import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { doLoginAPI } from "./loginAPI";
import type { AxiosResponse } from "axios";
import jwt from "jwt-decode";

export interface LoginData {
  username: string;
  password: string;
}

export interface LoginState {
  user: { username: string; password: string };
  pending: boolean;
  authenticate: boolean;
  error: boolean;
}

export const doLogin = createAsyncThunk(
  "login/doLogin",
  async (data: LoginData, { dispatch }) => {
    const res: AxiosResponse = await doLoginAPI(data);
    // The value we return becomes the `fulfilled` action payload
    return res.data;
  }
);

export const loginSlice = createSlice({
  name: "login",
  initialState: {
    user: {
      username: "",
      password: "",
    },
    pending: false,
    authenticate: false,
    error: false,
  },
  reducers: {
    loginLoading: (state: LoginState) => {
      state.pending = true;
    },
    loginSuccess: (state: LoginState, action) => {
      state.pending = false;
      //state.user = name.sub;
      state.authenticate = true;
      state.error = false;
    },
    loginError: (state: LoginState) => {
      state.error = true;
      state.pending = false;
    },
    logoutLoading: (state: LoginState) => {
      state.pending = true;
    },
    logoutSuccess: (state: LoginState, action) => {
      state.pending = false;
      state.user.username = "";
      state.user.password = "";
      state.authenticate = false;
      state.error = false;
    },
    logoutError: (state: LoginState) => {
      state.error = true;
      state.pending = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(doLogin.fulfilled, (state, action) => {
      try {
        const decodedPayload: any = jwt(action.payload);
        console.log(decodedPayload);
      } catch (err) {
        console.log(err);
      }
      //state.status = "success";
    });
    builder.addCase(doLogin.pending, (state) => {
      //state.status = "loading";
    });
    builder.addCase(doLogin.rejected, (state) => {
      //state.status = "failed";
    });
  },
});

export const {
  loginLoading,
  loginSuccess,
  loginError,
  logoutLoading,
  logoutSuccess,
  logoutError,
} = loginSlice.actions;

export default loginSlice.reducer;
