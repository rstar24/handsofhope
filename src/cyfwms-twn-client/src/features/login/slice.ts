import { doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface PostData {
  username: string;
  password: string;
}

export interface ResponseData {
  jwtToken: string;
}

export interface State {
  isLoggedIn: boolean;
  token: string;
  status: "failed" | "none" | "loading" | "success";
}

export const doPost = createAsyncThunk<ResponseData, PostData>(
  "login/doPost",
  async (data) => {
    const res: AxiosResponse = await doPostAPI(data);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const loginSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "login",
  initialState: {
    isLoggedIn: false,
    token: "",
    status: "none",
  },
  reducers: {
    cleanState(state) {
      state.isLoggedIn = false;
      state.token = "";
      state.status = "failed";
    },
    /** Set/Unset `isLoggedIn`. */
    setIsLogged(state, action) {
      state.isLoggedIn = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(doPost.fulfilled, (state, action) => {
      state.token = action.payload.jwtToken;
      state.isLoggedIn = true;
      state.status = "success";
    });
    builder.addCase(doPost.pending, (state) => {
      state.status = "loading";
    });
    builder.addCase(doPost.rejected, (state) => {
      state.status = "failed";
    });
  },
});

export const { cleanState, setIsLoggedInTrue, setIsLoggedInFalse } =
  loginSlice.actions;

export default loginSlice.reducer;
