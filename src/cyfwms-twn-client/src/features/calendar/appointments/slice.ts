import { doGetAPI, doGetByDateAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";
import { RootState } from "../../../library/store";

export interface Data {
  appointmentId: number;
  subject: string;
  status: string;
  date: string;
  participantId: number;
  icAppointmentId: number;
  cgProviderId: number;
}

// Empty Data
const emptyData: Data = {
  appointmentId: 0,
  subject: "",
  status: "",
  date: "",
  participantId: 0,
  icAppointmentId: 0,
  cgProviderId: 0,
};

export interface State {
  data: Data;
  record: Data[];
  allRecord: Data[];
  calendar: boolean;
  status: "failed" | "none" | "loading" | "success";
}

export const doGetAll = createAsyncThunk<Data[]>(
  "calendar/doGet",
  async (_, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doGetByDate = createAsyncThunk<Data[], string>(
  "calendar/doGetAppointmentByDate",
  async (date, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetByDateAPI(date, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const calendarSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "calendar",
  initialState: {
    data: emptyData,
    record: [],
    allRecord: [],
    calendar: false,
    status: "none",
  },
  reducers: {
    cleanState(state) {
      state.data = emptyData;
      state.record = [];
      state.allRecord = [];
      state.status = "none";
      state.calendar = false;
    },

    setCalendarView(state, action) {
      state.calendar = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetAll.fulfilled, (state, action) => {
        state.allRecord = action.payload;
        state.status = "success";
      })
      .addCase(doGetAll.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetAll.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doGetByDate.fulfilled, (state, action) => {
        state.record = action.payload;
        state.status = "success";
      })
      .addCase(doGetByDate.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetByDate.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanState, setCalendarView } = calendarSlice.actions;

export default calendarSlice.reducer;
