import { doGetAPI, doGetByDateAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";
import { RootState } from "../../../library/store";

export interface Data {
  reminderId: number;
  subject: string;
  status: string;
  reminderDate: string;
  participantId: number;
  fileDetailsId: number;
  cgProviderId: number;
}

// Empty Data
const emptyData: Data = {
  reminderId: 0,
  subject: "",
  status: "",
  reminderDate: "",
  participantId: 0,
  fileDetailsId: 0,
  cgProviderId: 0,
};

export interface State {
  data: Data;
  record: Data[];

  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Data, number>(
  "calendar/doGet",
  async (participantID, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(participantID, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doGetByDate = createAsyncThunk<Data[], string>(
  "calendar/doGetReminderByDate",
  async (date, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetByDateAPI(date, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const calendarReminderSlice = createSlice<
  State,
  SliceCaseReducers<State>
>({
  name: "calendarReminder",
  initialState: { data: emptyData, record: [], status: "none" },
  reducers: {
    cleanState(state) {
      state.data = emptyData;
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doGetByDate.fulfilled, (state, action) => {
        state.record = action.payload;
        state.status = "success";
      })
      .addCase(doGetByDate.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetByDate.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanState } = calendarReminderSlice.actions;

export default calendarReminderSlice.reducer;
