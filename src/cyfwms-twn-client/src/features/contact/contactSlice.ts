import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";
import { doGetContactAPI, doPostContactAPI } from "./contactApi";

export interface ContactGetData {
  user: {};
}
export interface ContactPostData {
  user: {};
}

export interface ContactGetState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}
export interface ContactPostState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetContact = createAsyncThunk(
  "contact/doGetContact",
  async (data: ContactGetData, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetContactAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostContact = createAsyncThunk(
  "contact/doPostContact",
  async (data: ContactPostData, { dispatch, getState }) => {
    const res: AxiosResponse = await doPostContactAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const contactSlice = createSlice({
  name: "contact",
  initialState: {
    participantId: 0,
    user: {
      participantId: 0,
      participantContactId: 0,
      addressLine1: "",
      addressLine2: "",
      city: "",
      province: "",
      postalCode: "",
      homePhone: "",
      workPhone: "",
      cellPhone: "",
      emailAddress: "",
    },
    jwtToken: "",
    status: "failed",
  },
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetContact.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doGetContact.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetContact.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostContact.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doPostContact.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostContact.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {} = contactSlice.actions;

export default contactSlice.reducer;
