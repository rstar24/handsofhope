import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";
import { doGetWorkerAPI, doPostWorkerAPI } from "./workerAPI";

export interface WorkerGetData {
  user: {};
}
export interface WorkerPostData {
  user: {};
}

export interface WorkerGetState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}
export interface WorkerPostDataState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetWorker = createAsyncThunk(
  "worker/doGetWorker",
  async (data: WorkerGetData, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetWorkerAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostWorker = createAsyncThunk(
  "worker/doPostWorker",
  async (data: WorkerPostData, { dispatch, getState }) => {
    const res: AxiosResponse = await doPostWorkerAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const workerSlice = createSlice({
  name: "worker",
  initialState: {
    participantId: 0,
    user: {
      participantId: 0,
      counselorCFSWorkerId: 0,
      role: "",
      name: "",
      contactInformation: "",
    },
    jwtToken: "",
    status: "failed",
  },
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetWorker.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doGetWorker.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetWorker.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostWorker.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doPostWorker.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostWorker.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {} = workerSlice.actions;

export default workerSlice.reducer;
