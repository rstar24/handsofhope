import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Capacity {
  cgCapacityId: number;
  cgProviderId: number;
  maximumCap: number;
  currUtil: number;
  currUtilDetails: string;
  preferences: string;
}

const emptyCapacity: Capacity = {
  cgCapacityId: 0,
  cgProviderId: 0,
  maximumCap: 0,
  currUtil: 0,
  currUtilDetails: "",
  preferences: "",
};

export interface State {
  data: Capacity;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Capacity, number>(
  "capacity/doGet",
  async (careProviderId, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(
      careProviderId,
      store.login.token
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Capacity, Capacity>(
  "capacity/doPost",
  async (formData, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doPostAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const capacitySlice = createSlice<State, SliceCaseReducers<State>>({
  name: "capacity",
  initialState: { data: emptyCapacity, status: "none" },
  reducers: {
    clean(state) {
      state.data = emptyCapacity;
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { clean } = capacitySlice.actions;

export default capacitySlice.reducer;
