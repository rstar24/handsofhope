import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Caregiver {
  cgProviderId: number;
  cgBackGroundCheckId: number;
  priBGCheckStatus: string;
  priDate: string;
  priDetails: string;
  priTrainingCompleted: string;
  secBGCheckStatus: string;
  secDate: string;
  secDetails: string;
  secTrainingCompleted: string;
}

const emptyCaregiver: Caregiver = {
  cgProviderId: 0,
  cgBackGroundCheckId: 0,
  priBGCheckStatus: "",
  priDate: "",
  priDetails: "",
  priTrainingCompleted: "",
  secBGCheckStatus: "",
  secDate: "",
  secDetails: "",
  secTrainingCompleted: "",
};

export interface State {
  data: Caregiver;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Caregiver, number>(
  "caregivers/doGet",
  async (cgCareProviderId, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(
      cgCareProviderId,
      store.login.token
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Caregiver, Caregiver>(
  "caregivers/doPost",
  async (formData: Caregiver, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doPostAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const caregiversSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "caregivers",
  initialState: { data: emptyCaregiver, status: "none" },
  reducers: {
    cleanState(state) {
      state.data = emptyCaregiver;
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanState } = caregiversSlice.actions;

export default caregiversSlice.reducer;
