import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface CareProvider {
  id: number;
  referenceId?: number;
  name: string;
  status: string;
  type: string;
  otherType: string;
  address: string;
  city: string;
  postalCode: string;
  province: string;
  phoneNumber: string;
  email: string;
  primaryCaregiver: string;
  secondaryCaregiver: string;
}

const emptyCareProvider: CareProvider = {
  id: 0,
  referenceId: 0,
  name: "",
  status: "",
  type: "",
  otherType: "",
  address: "",
  city: "",
  postalCode: "",
  province: "",
  phoneNumber: "",
  email: "",
  primaryCaregiver: "",
  secondaryCaregiver: "",
};

export interface State {
  data: CareProvider;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<CareProvider, number>(
  "careProvider/doGet",
  async (id, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(id, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<CareProvider, CareProvider>(
  "careProvider/doPost",
  async (formData: CareProvider, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doPostAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const careProviderSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "careProvider",
  initialState: { data: emptyCareProvider, status: "none" },
  reducers: {
    clean(state) {
      state.data = emptyCareProvider;
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { clean } = careProviderSlice.actions;

export default careProviderSlice.reducer;
