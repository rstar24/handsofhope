import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface CareProvider {
  id: number;
  referenceId?: number;
  name: string;
  status: string;
  type: string;
  otherType: string;
  address: string;
  city: string;
  postalCode: string;
  province: string;
  phoneNumber: string;
  email: string;
  primaryCaregiver: any;
  secondaryCaregiver: any;
}

export interface GetCareProvider {
  id: number;
  referenceId?: number;
  name: string;
  status: string;
  type: string;
  otherType: string;
  address: string;
  city: string;
  postalCode: string;
  province: string;
  phoneNumber: string;
  email: string;
  primaryCaregiver: any;
  secondaryCaregiver: any;
  priParticipantId: number;
  secParticipantId: number;
}

const emptyGetCareProvider: GetCareProvider = {
  id: 0,
  referenceId: 0,
  name: "",
  status: "",
  type: "",
  otherType: "",
  address: "",
  city: "",
  postalCode: "",
  province: "",
  phoneNumber: "",
  email: "",
  primaryCaregiver: "",
  secondaryCaregiver: "",
  priParticipantId: 0,
  secParticipantId: 0,
};

const emptyCareProvider: CareProvider = {
  id: 0,
  referenceId: 0,
  name: "",
  status: "",
  type: "",
  otherType: "",
  address: "",
  city: "",
  postalCode: "",
  province: "",
  phoneNumber: "",
  email: "",
  primaryCaregiver: "",
  secondaryCaregiver: "",
};

export interface State {
  cgClientName: string;
  cgParticipant: number;
  cgSecClientName: string;
  cgSecparticipant: number;
  data: CareProvider;
  getData: GetCareProvider;

  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<GetCareProvider, number>(
  "careProvider/doGet",
  async (id, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(id, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<CareProvider, CareProvider>(
  "careProvider/doPost",
  async (formData: CareProvider, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doPostAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const careProviderSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "careProvider",
  initialState: {
    getData: emptyGetCareProvider,
    data: emptyCareProvider,
    cgClientName: "",
    cgParticipant: 0,
    cgSecClientName: "",
    cgSecparticipant: 0,
    status: "none",
  },
  reducers: {
    clean(state) {
      state.data = emptyCareProvider;
      state.status = "none";
      state.getData = emptyGetCareProvider;
      state.cgClientName = "";
      state.cgParticipant = 0;
      state.cgSecClientName = "";
      state.cgSecparticipant = 0;
    },

    setName(state, action) {
      state.data.primaryCaregiver = action.payload;
    },

    setCgClientName(state, action) {
      state.cgClientName = action.payload;
      state.getData.primaryCaregiver = action.payload;
    },
    setCgId(state, action) {
      state.cgParticipant = action.payload;
      state.getData.priParticipantId = action.payload;
    },

    setCgSecClientName(state, action) {
      state.cgSecClientName = action.payload;
      state.getData.secondaryCaregiver = action.payload;
    },
    setCgSecId(state, action) {
      state.cgSecparticipant = action.payload;
      state.getData.secParticipantId = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.getData = action.payload;
        state.cgParticipant = action.payload.priParticipantId;
        state.cgSecparticipant = action.payload.secParticipantId;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.getData.id = action.payload.id;
        state.getData.address = action.payload.address;
        state.getData.city = action.payload.city;
        state.getData.email = action.payload.email;
        state.getData.name = action.payload.name;
        state.getData.otherType = action.payload.otherType;
        state.getData.phoneNumber = action.payload.phoneNumber;
        state.getData.postalCode = action.payload.postalCode;
        //state.getData.priParticipantId = action.payload.primaryCaregiver;
        state.getData.province = action.payload.province;
        state.getData.referenceId = action.payload.referenceId;
        state.getData.status = action.payload.status;
        state.getData.type = action.payload.type;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {
  clean,
  setCgClientName,
  setCgId,
  setCgSecClientName,
  setCgSecId,
} = careProviderSlice.actions;

export default careProviderSlice.reducer;
