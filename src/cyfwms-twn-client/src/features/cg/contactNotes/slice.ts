import { doGetAPI, doPostAPI, doRemoveAPI, doSearchAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Data {
  cgContactNotesId: number;
  cgProviderId: number;
  name: string;
  worker: string;
  date: string;
  time: string;
  contactMethod: string;
  needAddress: string;
  summary: string;
  result: string;
  nextStep: string;
  casePlanProgress: string;
  additionalInformation: string;
}

// Empty Data
const emptyData: Data = {
  cgContactNotesId: 0,
  cgProviderId: 0,
  name: "",
  worker: "",
  date: "",
  time: "",
  contactMethod: "",
  needAddress: "",
  summary: "",
  result: "",
  nextStep: "",
  casePlanProgress: "",
  additionalInformation: "",
};

export interface State {
  record: Data[];
  data: Data;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Data, number>(
  "cgContactNotes/doGet",
  async (cgProviderId, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetAPI(cgProviderId, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Data, Data>(
  "cgContactNotes/doPost",
  async (formData: Data, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doRemove = createAsyncThunk<Data, number>(
  "cgContactNotes/doRemove",
  async (formData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doRemoveAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doSearch = createAsyncThunk<Data[], any>(
  "cgContactNotes/doSearch",
  async (formData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doSearchAPI(
      formData.id,
      formData.data || null,
      store.login.token
    );

    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cgContactNotesSlice = createSlice<State, SliceCaseReducers<State>>(
  {
    name: "cgContactNotes",
    initialState: {
      record: [],
      data: emptyData,
      status: "failed",
    },
    reducers: {
      cleanState(state) {
        state.data = emptyData;
        state.record = [];
        state.status = "none";
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(doGet.fulfilled, (state, action) => {
          state.data = action.payload;
          state.status = "success";
        })
        .addCase(doGet.pending, (state) => {
          state.status = "loading";
        })
        .addCase(doGet.rejected, (state) => {
          state.status = "failed";
        });
      builder
        .addCase(doPost.fulfilled, (state, action) => {
          state.data = action.payload;
          state.status = "success";
        })
        .addCase(doPost.pending, (state) => {
          state.status = "loading";
        })
        .addCase(doPost.rejected, (state) => {
          state.status = "failed";
        });
      builder
        .addCase(doSearch.fulfilled, (state, action) => {
          state.record = action.payload;
          state.status = "success";
        })
        .addCase(doSearch.pending, (state) => {
          state.status = "loading";
        })
        .addCase(doSearch.rejected, (state) => {
          state.status = "failed";
        });
      builder
        .addCase(doRemove.fulfilled, (state, action) => {
          state.status = "success";
        })
        .addCase(doRemove.pending, (state) => {
          state.status = "loading";
        })
        .addCase(doRemove.rejected, (state) => {
          state.status = "failed";
        });
    },
  }
);

export const { cleanState } = cgContactNotesSlice.actions;

export default cgContactNotesSlice.reducer;
