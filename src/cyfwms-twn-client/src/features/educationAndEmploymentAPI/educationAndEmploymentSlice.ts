import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";
import {
  doGetEducationAndEmploymentAPI,
  doPostEducationAndEmploymentAPI,
} from "./educationAndEmploymentAPI";

export interface EducationAndEmploymentGetData {
  readUser: {};
}
export interface EducationAndEmploymentPostData {
  user: {};
}

export interface EducationAndEmploymentGetState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}
export interface EducationAndEmploymentPostState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetEducationAndEmployment = createAsyncThunk(
  "educationAndEmployment/doGetEducationAndEmployment",
  async (data: EducationAndEmploymentGetData, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetEducationAndEmploymentAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostEducationAndEmployment = createAsyncThunk(
  "educationAndEmployment/doPostEducationAndEmployment",
  async (data: EducationAndEmploymentPostData, { dispatch, getState }) => {
    const res: AxiosResponse = await doPostEducationAndEmploymentAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const educationAndEmploymentSlice = createSlice({
  name: "educationAndEmployment",
  initialState: {
    participantId: 0,
    readUser: {},
    user: {
      participantId: 0,
      educationId: 0,
      attendingSchool: "",
      school: "",
      grade: "",
      employmentId: 0,
      employed: "",
      typeOfEmployment: "",
      desiredProfession: "",
    },
    jwtToken: "",
    status: "failed",
  },
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetEducationAndEmployment.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.readUser = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doGetEducationAndEmployment.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetEducationAndEmployment.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostEducationAndEmployment.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doPostEducationAndEmployment.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostEducationAndEmployment.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {} = educationAndEmploymentSlice.actions;

export default educationAndEmploymentSlice.reducer;
