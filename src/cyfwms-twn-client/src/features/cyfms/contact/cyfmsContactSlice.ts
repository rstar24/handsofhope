import { doGetContactAPI, doPostContactAPI } from "./cyfmsContactAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface cyfmsContactData {
  participantId: number;
  participantContactId: number;
  addressLine1: string;
  addressLine2: string;
  city: string;
  province: string;
  postalCode: string;
  homePhone: string;
  workPhone: string;
  cellPhone: string;
  emailAddress: string;
}

export interface cyfmsContactState {
  contactData: cyfmsContactData;
  status: "failed" | "loading" | "success";
}

export const doGetContact = createAsyncThunk(
  "cyfmsContact/doGetContact",
  async (participantId: number, { getState }) => {
    const res: AxiosResponse = await doGetContactAPI(
      participantId,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostContact = createAsyncThunk(
  "cyfmsContact/doPostContact",
  async (contactData: cyfmsContactData, { getState }) => {
    const res: AxiosResponse = await doPostContactAPI(
      contactData,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsContactSlice = createSlice<
  cyfmsContactState,
  SliceCaseReducers<cyfmsContactState>
>({
  name: "cyfmsContact",
  initialState: {
    contactData: {
      participantId: 0,
      participantContactId: 0,
      addressLine1: "",
      addressLine2: "",
      city: "",
      province: "",
      postalCode: "",
      homePhone: "",
      workPhone: "",
      cellPhone: "",
      emailAddress: "",
    },
    status: "failed",
  },
  reducers: {
    cleanContactState(state) {
      state.contactData.participantId = 0;
      state.contactData.participantContactId = 0;
      state.contactData.addressLine1 = "";
      state.contactData.addressLine2 = "";
      state.contactData.city = "";
      state.contactData.province = "";
      state.contactData.postalCode = "";
      state.contactData.homePhone = "";
      state.contactData.workPhone = "";
      state.contactData.cellPhone = "";
      state.contactData.emailAddress = "";
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetContact.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.contactData = action.payload;
        } catch (err) {
          console.log(err);
        }
        state.status = "success";
      })
      .addCase(doGetContact.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetContact.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostContact.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.contactData = action.payload;
        } catch (err) {
          console.log(err);
        }
        state.status = "success";
      })
      .addCase(doPostContact.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostContact.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanContactState } = cyfmsContactSlice.actions;

export default cyfmsContactSlice.reducer;
