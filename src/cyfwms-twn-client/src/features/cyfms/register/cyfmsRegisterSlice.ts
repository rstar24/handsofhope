import {
  doGetCYFMSRegisterAPI,
  doPostCYFMSRegisterAPI,
} from "./cyfmsRegisterAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface CYFMSRegisterGetData {
  readUser: {
    participantId: Number;
    firstname: "";
    middleName: "";
    surname: "";
    dateOfBirth: "";
    gender: "";
    maritalStatus: "";
  };
}

export interface CYFMSRegisterGetState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetCYFMSRegister = createAsyncThunk(
  "register/doGetRegister",
  async (data: CYFMSRegisterGetData, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetCYFMSRegisterAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export interface CYFMSRegisterPostData {
  user: {
    firstname: "";
    middleName: "";
    surname: "";
    dateOfBirth: "";
    gender: "";
    maritalStatus: "";
  };
}

export interface CYFMSRegisterPostState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doPostCYFMSRegister = createAsyncThunk(
  "register/doPostRegister",
  async (data: CYFMSRegisterPostData, { dispatch, getState }) => {
    const res: AxiosResponse = await doPostCYFMSRegisterAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsRegisterSlice = createSlice({
  name: "cyfmsRegister",
  initialState: {
    readUser: {
      participantId: 0,
      firstname: "",
      middleName: "",
      surname: "",
      dateOfBirth: "",
      gender: "",
      maritalStatus: "",
    },
    user: {
      participantId: 0,
      firstname: "",
      middleName: "",
      surname: "",
      dateOfBirth: "",
      gender: "",
      maritalStatus: "",
    },
    jwtToken: "",
    status: "failed",
  },
  reducers: {
    cleanRegisterState(state: any) {
      state.readUser = { participantId: 0 };
      state.user = { participantId: 0 };
      state.jwtToken = "";
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetCYFMSRegister.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.readUser = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doGetCYFMSRegister.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetCYFMSRegister.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostCYFMSRegister.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doPostCYFMSRegister.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostCYFMSRegister.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanRegisterState } = cyfmsRegisterSlice.actions;

export default cyfmsRegisterSlice.reducer;
