import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";
import { doGetAllRecordAPI } from "./api";

export interface GetAllData {
  readUser: any;
}

export interface GetAllState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetAllRecord = createAsyncThunk(
  "search/doGetAllRecord",
  async (data: GetAllData, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetAllRecordAPI(
      data,
      (getState() as any).login.token
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const allRecordSlice = createSlice({
  name: "search",
  initialState: {
    participantId: 0,
    readUser: {},

    jwtToken: "",
    status: "failed",
  },
  reducers: {
    cleanAllRecordState(state: any) {
      state.readUser = {};
      state.jwtToken = "";
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetAllRecord.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.readUser = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doGetAllRecord.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetAllRecord.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanAllRecordState } = allRecordSlice.actions;

export default allRecordSlice.reducer;
