import {
  doGetHouseholdMembersAPI,
  doPostHouseholdMembersAPI,
} from "./cyfmsHouseholdMembersAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

//Empty record
const emptyRecord = {
  participantId: 0,
  householdMemberId: 0,
  name: "",
  gender: "",
  dateOfBirth: "",
  residing: "",
};

export interface cyfmsHouseholdMembersRecord {
  participantId: number;
  householdMemberId: number;
  name: string;
  gender: string;
  dateOfBirth: string;
  residing: string;
}

export interface cyfmsHouseholdMembersData {
  recordsList: cyfmsHouseholdMembersRecord[];
}

export interface cyfmsHouseholdMembersState {
  householdMembersData: cyfmsHouseholdMembersData;
  status: "failed" | "loading" | "success";
}

export const doGetHouseholdMembers = createAsyncThunk(
  "cyfmsHouseholdMembers/doGetHouseholdMembers",
  async (arg: any, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetHouseholdMembersAPI(
      store.cyfmsRegister.user.participantId,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostHouseholdMembers = createAsyncThunk(
  "cyfmsHouseholdMembers/doPostHouseholdMembers",
  async (
    cyfmsHouseholdMembersFormData: cyfmsHouseholdMembersRecord[],
    { getState }
  ) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostHouseholdMembersAPI(
      cyfmsHouseholdMembersFormData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsHouseholdMembersSlice = createSlice<
  cyfmsHouseholdMembersState,
  SliceCaseReducers<cyfmsHouseholdMembersState>
>({
  name: "cyfmsHouseholdMembers",
  initialState: {
    householdMembersData: {
      recordsList: [emptyRecord],
    },
    status: "failed",
  },
  reducers: {
    addMoreHouseholdMembersRecord(state, action) {
      const lastIndex = state.householdMembersData.recordsList.length - 1;
      state.householdMembersData.recordsList[lastIndex] = action.payload;
      state.householdMembersData.recordsList.push(emptyRecord);
    },
    cleanHouseholdMembersState(state) {
      state.householdMembersData.recordsList = [emptyRecord];
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetHouseholdMembers.fulfilled, (state, action) => {
        if (action.payload.length === 0) {
          state.householdMembersData.recordsList = [emptyRecord];
        } else {
          state.householdMembersData.recordsList = action.payload;
        }
        state.status = "success";
      })
      .addCase(doGetHouseholdMembers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetHouseholdMembers.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostHouseholdMembers.fulfilled, (state, action) => {
        state.householdMembersData.recordsList = action.payload;
        state.status = "success";
      })
      .addCase(doPostHouseholdMembers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostHouseholdMembers.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { addMoreHouseholdMembersRecord, cleanHouseholdMembersState } =
  cyfmsHouseholdMembersSlice.actions;

export default cyfmsHouseholdMembersSlice.reducer;
