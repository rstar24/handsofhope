import { doGetAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Data {}

export interface State {
  data: Data;
  status: "failed" | "none" | "loading" | "success";
}

export const doGetAll = createAsyncThunk<Data, number>(
  "search/doGetAll",
  async (referenceID, { getState }) => {
    const state = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(referenceID, state.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const allSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "all",
  initialState: {
    data: {},
    status: "none",
  },
  reducers: {
    cleanAllState(state) {
      state.data = {};
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetAll.fulfilled, (state, action) => {
        console.log(action.payload);
        //state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGetAll.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetAll.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanAllState } = allSlice.actions;

export default allSlice.reducer;
