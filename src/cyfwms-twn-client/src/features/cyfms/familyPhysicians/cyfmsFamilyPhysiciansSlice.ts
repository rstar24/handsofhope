import {
  doGetFamilyPhysiciansAPI,
  doPostFamilyPhysiciansAPI,
} from "./cyfmsFamilyPhysiciansAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

// Empty record
const emptyRecord = {
  participantId: 0,
  familyPhysicianId: 0,
  name: "",
  phone: "",
  cell: "",
  listOfMedication: "",
};

export interface cyfmsFamilyPhysiciansRecord {
  participantId: number;
  familyPhysicianId: number;
  name: string;
  phone: string;
  cell: string;
  listOfMedication: string;
}

export interface cyfmsFamilyPhysiciansData {
  recordsList: cyfmsFamilyPhysiciansRecord[];
}

export interface cyfmsFamilyPhysiciansState {
  familyPhysiciansData: cyfmsFamilyPhysiciansData;
  status: "failed" | "loading" | "success";
}

export const doGetFamilyPhysicians = createAsyncThunk(
  "cyfmsFamilyPhysicians/doGetFamilyPhysicians",
  async (participantId: number, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetFamilyPhysiciansAPI(
      participantId,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostFamilyPhysicians = createAsyncThunk(
  "cyfmsFamilyPhysicians/doPostFamilyPhysicians",
  async (
    cyfmsFamilyPhysiciansFormData: cyfmsFamilyPhysiciansRecord[],
    { getState }
  ) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostFamilyPhysiciansAPI(
      cyfmsFamilyPhysiciansFormData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsFamilyPhysiciansSlice = createSlice<
  cyfmsFamilyPhysiciansState,
  SliceCaseReducers<cyfmsFamilyPhysiciansState>
>({
  name: "cyfmsfamilyPhysicians",
  initialState: {
    familyPhysiciansData: {
      recordsList: [emptyRecord],
    },
    status: "failed",
  },
  reducers: {
    addMoreFamilyPhysiciansRecord(state, action) {
      const lastIndex = state.familyPhysiciansData.recordsList.length - 1;
      state.familyPhysiciansData.recordsList[lastIndex] = action.payload;
      state.familyPhysiciansData.recordsList.push(emptyRecord);
    },
    cleanFamilyPhysiciansState(state) {
      state.familyPhysiciansData.recordsList = [emptyRecord];
      state.status = "failed";
    },
    removeFamilyPhysiciansRecordNumber(state, action) {
      state.familyPhysiciansData.recordsList.splice(action.payload - 1, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetFamilyPhysicians.fulfilled, (state, action) => {
        if (action.payload.length === 0) {
          state.familyPhysiciansData.recordsList = [emptyRecord];
        } else {
          state.familyPhysiciansData.recordsList = action.payload;
        }
        state.status = "success";
      })
      .addCase(doGetFamilyPhysicians.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetFamilyPhysicians.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostFamilyPhysicians.fulfilled, (state, action) => {
        state.familyPhysiciansData.recordsList = action.payload;
        state.status = "success";
      })
      .addCase(doPostFamilyPhysicians.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostFamilyPhysicians.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {
  addMoreFamilyPhysiciansRecord,
  cleanFamilyPhysiciansState,
  removeFamilyPhysiciansRecordNumber,
} = cyfmsFamilyPhysiciansSlice.actions;

export default cyfmsFamilyPhysiciansSlice.reducer;
