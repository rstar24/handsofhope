import {
  doGetCriminalHistoryAPI,
  doPostCriminalHistoryAPI,
} from "./cyfmsCriminalHistoryAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

// Empty Record
const emptyRecord = {
  criminalHistoryRecordId: 0,
  arrestDate: "",
  charges: "",
  conviction: "",
  sentence: "",
};

// Empty Data
const emptyData = {
  participantId: 0,
  criminalHistoryId: 0,
  criminalHistoryRecordList: [emptyRecord],
  probation: false,
  parole: false,
  conditions: "",
  courtWorkerAndContactInfo: "",
};

export interface cyfmsCHRecord {
  criminalHistoryRecordId: number;
  arrestDate: string;
  charges: string;
  conviction: string;
  sentence: string;
}

export interface cyfmsCHData {
  participantId: number;
  criminalHistoryId: number;
  criminalHistoryRecordList: cyfmsCHRecord[];
  probation: boolean;
  parole: boolean;
  conditions: string;
  courtWorkerAndContactInfo: string;
}

export interface cyfmsCHState {
  data: cyfmsCHData;
  status: "failed" | "loading" | "success";
}

export const doGetCriminalHistory = createAsyncThunk<cyfmsCHData, number>(
  "cyfmsCriminalhistory/doGetCriminalHistory",
  async (participantId, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetCriminalHistoryAPI(
      participantId,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostCriminalHistory = createAsyncThunk<cyfmsCHData, cyfmsCHData>(
  "cyfmsCriminalHistory/doPostCriminalHistory",
  async (cyfmsCHFormData: cyfmsCHData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostCriminalHistoryAPI(
      cyfmsCHFormData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsCriminalHistorySlice = createSlice<
  cyfmsCHState,
  SliceCaseReducers<cyfmsCHState>
>({
  name: "cyfmsCriminalHistory",
  initialState: { data: emptyData, status: "failed" },
  reducers: {
    addMoreCriminalHistoryRecord(state, action) {
      const lastIndex = state.data.criminalHistoryRecordList.length - 1;
      state.data.criminalHistoryRecordList[lastIndex] = action.payload;
      state.data.criminalHistoryRecordList.push(emptyRecord);
    },
    cleanCriminalHistoryState(state) {
      state = { data: emptyData, status: "failed" };
    },
    removeCriminalHistoryRecordNumber(state, action) {
      state.data.criminalHistoryRecordList.splice(action.payload - 1, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetCriminalHistory.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGetCriminalHistory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetCriminalHistory.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostCriminalHistory.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPostCriminalHistory.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostCriminalHistory.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {
  addMoreCriminalHistoryRecord,
  cleanCriminalHistoryState,
  removeCriminalHistoryRecordNumber,
} = cyfmsCriminalHistorySlice.actions;

export default cyfmsCriminalHistorySlice.reducer;
