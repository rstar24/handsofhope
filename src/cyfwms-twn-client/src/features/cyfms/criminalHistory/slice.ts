import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Record {
  criminalHistoryRecordId: number;
  arrestDate: string;
  charges: string;
  conviction: string;
  sentence: string;
}

// Empty Record
const emptyRecord: Record = {
  criminalHistoryRecordId: 0,
  arrestDate: "",
  charges: "",
  conviction: "",
  sentence: "",
};

export interface Data {
  participantId: number;
  criminalHistoryId: number;
  criminalHistoryRecordList: Record[];
  probation: boolean;
  parole: boolean;
  conditions: string;
  courtWorkerAndContactInfo: string;
}

// Empty Data
const emptyData = {
  participantId: 0,
  criminalHistoryId: 0,
  criminalHistoryRecordList: [emptyRecord],
  probation: false,
  parole: false,
  conditions: "",
  courtWorkerAndContactInfo: "",
};

export interface State {
  data: Data;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Data, number>(
  "criminalhistory/doGet",
  async (participantID, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetAPI(
      participantID,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Data, Data>(
  "criminalHistory/doPost",
  async (formData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostAPI(formData, store.login.jwtToken);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const criminalHistorySlice = createSlice<
  State,
  SliceCaseReducers<State>
>({
  name: "criminalHistory",
  initialState: { data: emptyData, status: "none" },
  reducers: {
    flipProbation(state) {
      state.data.probation = !state.data.probation;
    },
    flipParole(state) {
      state.data.parole = !state.data.parole;
    },
    addMoreRecord(state, action) {
      const lastIndex = state.data.criminalHistoryRecordList.length - 1;
      state.data.criminalHistoryRecordList[lastIndex] = action.payload;
      state.data.criminalHistoryRecordList.push(emptyRecord);
    },
    removeRecordNumber(state, action) {
      state.data.criminalHistoryRecordList.splice(action.payload - 1, 1);
    },
    cleanState(state) {
      state.data = emptyData;
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {
  flipProbation,
  flipParole,
  addMoreRecord,
  cleanState,
  removeRecordNumber,
} = criminalHistorySlice.actions;

export default criminalHistorySlice.reducer;
