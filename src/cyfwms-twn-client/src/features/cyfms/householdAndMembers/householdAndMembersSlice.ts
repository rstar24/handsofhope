import {
  doGetHouseholdAndMembersAPI,
  doPostHouseholdAndMembersAPI,
} from "./householdAndMembersAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface HouseholdAndMembersGetData {
  user: {};
}

export interface HouseholdAndMembersGetState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetHouseholdAndMembers = createAsyncThunk(
  "householdAndMembers/doGetHouseholdAndMembers",
  async (data: HouseholdAndMembersGetData, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetHouseholdAndMembersAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export interface HouseholdAndMembersPostData {
  user: {};
}

export interface HouseholdAndMembersPostState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doPostHouseholdAndMembers = createAsyncThunk(
  "householdAndMembers/doPostHouseholdAndMembers",
  async (data: HouseholdAndMembersPostData, { dispatch, getState }) => {
    const res: AxiosResponse = await doPostHouseholdAndMembersAPI(
      data,
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const householdAndMembersSlice = createSlice({
  name: "household",
  initialState: {
    participantId: 0,
    user: {
      participantId: 0,
      householdMemberId: 0,
      name: "",
      gender: "",
      dateOfBirth: "",
      residing: "",
    },
    jwtToken: "",
    status: "failed",
  },
  reducers: {
    cleanHouseHoldAndMemberState(state: any) {
      state.participantId = 0;
      state.user = {};
      state.jwtToken = "";
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetHouseholdAndMembers.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doGetHouseholdAndMembers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetHouseholdAndMembers.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostHouseholdAndMembers.fulfilled, (state, action) => {
        try {
          //const decodedPayload: any = jwt(action.payload.jwtToken);
          state.user = action.payload;
        } catch (err) {
          console.log(err);
        }

        state.status = "success";
      })
      .addCase(doPostHouseholdAndMembers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostHouseholdAndMembers.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanHouseHoldAndMemberState } =
  householdAndMembersSlice.actions;

export default householdAndMembersSlice.reducer;
