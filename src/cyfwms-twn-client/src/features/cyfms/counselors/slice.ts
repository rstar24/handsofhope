import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Record {
  participantId: number;
  counselorCFSWorkerId: number;
  role: string;
  name: string;
  startDate: string;
  endDate: string;
  contactInformation: string;
}

// Empty Record
const emptyRecord: Record = {
  participantId: 0,
  counselorCFSWorkerId: 0,
  role: "",
  name: "",
  startDate: "",
  endDate: "",
  contactInformation: "",
};

export interface Data {
  recordsList: Record[];
}

// Empty Data
const emptyData: Data = {
  recordsList: [emptyRecord],
};

export interface State {
  data: Data;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Record[], number>(
  "counselors/doGet",
  async (participantID, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetAPI(
      participantID,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Record[], Data>(
  "counselors/doPost",
  async (formData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostAPI(
      formData.recordsList,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const counselorsSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "counselors",
  initialState: { data: emptyData, status: "none" },
  reducers: {
    addMoreRecord(state, action) {
      const lastIndex = state.data.recordsList.length - 1;
      state.data.recordsList[lastIndex] = action.payload;
      state.data.recordsList.push(emptyRecord);
    },
    removeRecordNumber(state, action) {
      state.data.recordsList.splice(action.payload - 1, 1);
    },
    cleanState(state) {
      state.data = emptyData;
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        if (action.payload.length === 0) {
          state.data = emptyData;
        } else {
          state.data.recordsList = action.payload;
        }
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data.recordsList = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { addMoreRecord, removeRecordNumber, cleanState } =
  counselorsSlice.actions;

export default counselorsSlice.reducer;
