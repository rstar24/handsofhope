import { doGetCounselorsAPI, doPostCounselorsAPI } from "./cyfmsCounselorsAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

// Empty record
const emptyRecord = {
  participantId: 0,
  counselorCFSWorkerId: 0,
  role: "",
  name: "",
  contactInformation: "",
};

export interface cyfmsCounselorsRecord {
  participantId: number;
  counselorCFSWorkerId: number;
  role: string;
  name: string;
  contactInformation: string;
}

export interface cyfmsCounselorsData {
  recordsList: cyfmsCounselorsRecord[];
}

export interface cyfmsCounselorsState {
  counselorsData: cyfmsCounselorsData;
  status: "failed" | "loading" | "success";
}

export const doGetCounselors = createAsyncThunk(
  "cyfmsCounselors/doGetCounselors",
  async (arg: any, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetCounselorsAPI(
      arg || store.cyfmsRegister.user.participantId,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostCounselors = createAsyncThunk(
  "cyfmsCounselors/doPostCounselors",
  async (
    cyfmsFamilyPhysiciansFormData: cyfmsCounselorsRecord[],
    { getState }
  ) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostCounselorsAPI(
      cyfmsFamilyPhysiciansFormData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsCounselorsSlice = createSlice<
  cyfmsCounselorsState,
  SliceCaseReducers<cyfmsCounselorsState>
>({
  name: "cyfmsCounselors",
  initialState: {
    counselorsData: {
      recordsList: [emptyRecord],
    },
    status: "failed",
  },
  reducers: {
    addMoreCounselorsRecord(state, action) {
      const lastIndex = state.counselorsData.recordsList.length - 1;
      state.counselorsData.recordsList[lastIndex] = action.payload;
      state.counselorsData.recordsList.push(emptyRecord);
    },
    cleanCounselorsState(state) {
      state.counselorsData.recordsList = [emptyRecord];
      state.status = "failed";
    },
    removeCounselorsRecordNumber(state, action) {
      state.counselorsData.recordsList.splice(action.payload - 1, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetCounselors.fulfilled, (state, action) => {
        if (action.payload.length === 0) {
          state.counselorsData.recordsList = [emptyRecord];
        } else {
          state.counselorsData.recordsList = action.payload;
        }
        state.status = "success";
      })
      .addCase(doGetCounselors.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetCounselors.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostCounselors.fulfilled, (state, action) => {
        state.counselorsData.recordsList = action.payload;
        state.status = "success";
      })
      .addCase(doPostCounselors.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostCounselors.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {
  addMoreCounselorsRecord,
  cleanCounselorsState,
  removeCounselorsRecordNumber,
} = cyfmsCounselorsSlice.actions;

export default cyfmsCounselorsSlice.reducer;
