import { doGetAPI, doPostAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Data {
  participantId: number;
  participantOtherInfoId: number;
  strength: string;
  weakness: string;
  skills: string;
  experiences: string;
  effectiveCopingSkills: string;
}

// Empty Data
const emptyData: Data = {
  participantId: 0,
  participantOtherInfoId: 0,
  strength: "",
  weakness: "",
  skills: "",
  experiences: "",
  effectiveCopingSkills: "",
};

export interface State {
  data: Data;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Data, number>(
  "otherInformation/doGet",
  async (participantID, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(participantID, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Data, Data>(
  "otherInformation/doPost",
  async (formData, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doPostAPI(formData, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const otherInformationSlice = createSlice<
  State,
  SliceCaseReducers<State>
>({
  name: "otherInformation",
  initialState: { data: emptyData, status: "none" },
  reducers: {
    cleanState(state) {
      state.data = emptyData;
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanState } = otherInformationSlice.actions;

export default otherInformationSlice.reducer;
