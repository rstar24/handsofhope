import {
  doGetOtherInformationAPI,
  doPostOtherInformationAPI,
} from "./cyfmsOtherInformationAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

//Empty Data
const emptyData = {
  participantId: 0,
  participantOtherInfoId: 0,
  strength: "",
  weakness: "",
  skills: "",
  experiences: "",
  effectiveCopingSkills: "",
};

export interface cyfmsOtherInformationData {
  participantId: number;
  participantOtherInfoId: number;
  strength: string;
  weakness: string;
  skills: string;
  experiences: string;
  effectiveCopingSkills: string;
}

export interface cyfmsOtherInformationState {
  otherInformationData: cyfmsOtherInformationData;
  status: "failed" | "loading" | "success";
}

export const doGetOtherInformation = createAsyncThunk(
  "cyfmsOtherInformation/doGetotherInformation",
  async (arg: any, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetOtherInformationAPI(
      arg || store.cyfmsRegister.user.participantId,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostOtherInformation = createAsyncThunk(
  "cyfmsOtherInformation/doPostotherInformation",
  async (
    cyfmsOtherInformationFormData: cyfmsOtherInformationData,
    { getState }
  ) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostOtherInformationAPI(
      cyfmsOtherInformationFormData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const cyfmsOtherInformationSlice = createSlice<
  cyfmsOtherInformationState,
  SliceCaseReducers<cyfmsOtherInformationState>
>({
  name: "cyfmsOtherInformation",
  initialState: {
    otherInformationData: emptyData,
    status: "failed",
  },
  reducers: {
    cleanOtherInformationState(state) {
      state.otherInformationData = emptyData;
      state.status = "failed";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetOtherInformation.fulfilled, (state, action) => {
        state.otherInformationData = action.payload;
        state.status = "success";
      })
      .addCase(doGetOtherInformation.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetOtherInformation.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostOtherInformation.fulfilled, (state, action) => {
        state.otherInformationData = action.payload;
        state.status = "success";
      })
      .addCase(doPostOtherInformation.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostOtherInformation.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanOtherInformationState } =
  cyfmsOtherInformationSlice.actions;

export default cyfmsOtherInformationSlice.reducer;
