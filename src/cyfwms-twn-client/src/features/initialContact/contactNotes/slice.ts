import { doGetAPI, doPostAPI, doSearchAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Record {
  fileDetailsId: number;
  contactNotesId: number;
  name: string;
  worker: string;
  date: string;
  time: string;
  contactMethod: string;
  needAddress: string;
  summary: string;
  result: string;
  nextStep: string;
  casePlanProgress: string;
  additionalInformation: string;
}

export interface Data {
  fileDetailsId: number;
  contactNotesId: number;
  name: string;
  worker: string;
  date: string;
  time: string;
  contactMethod: string;
  needAddress: string;
  summary: string;
  result: string;
  nextStep: string;
  casePlanProgress: string;
  additionalInformation: string;
}

// Empty Data
const emptyData: Data = {
  fileDetailsId: 0,
  contactNotesId: 0,
  name: "",
  worker: "",
  date: "",
  time: "",
  contactMethod: "",
  needAddress: "",
  summary: "",
  result: "",
  nextStep: "",
  casePlanProgress: "",
  additionalInformation: "",
};

export interface State {
  record: Record[];
  data: Data;
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Data, number>(
  "contactNotes/doGet",
  async (filedetailsid, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetAPI(
      filedetailsid,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPost = createAsyncThunk<Data, Data>(
  "contactNotes/doPost",
  async (formData: Data, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostAPI(formData, store.login.jwtToken);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doSearch = createAsyncThunk<Record[], any>(
  "contactNotes/doSearch",
  async (formData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doSearchAPI(
      formData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const fileDetailsSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "contactNotes",
  initialState: {
    record: [],
    data: emptyData,
    status: "failed",
  },
  reducers: {
    cleanState(state) {
      state.data = emptyData;
      state.record = [];
      state.status = "none";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPost.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPost.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPost.rejected, (state) => {
        state.status = "failed";
      });

    builder
      .addCase(doSearch.fulfilled, (state, action) => {
        state.record = action.payload;
        state.status = "success";
      })
      .addCase(doSearch.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doSearch.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanState } = fileDetailsSlice.actions;

export default fileDetailsSlice.reducer;
