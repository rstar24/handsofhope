import { doDeleteAPI, doGetAPI } from "./api";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { RootState } from "../../../library/store";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

export interface Data {}

export interface State {
  status: "failed" | "none" | "loading" | "success";
}

export const doGet = createAsyncThunk<Data, number>(
  "all/doGet",
  async (fileNumber, { getState }) => {
    const state = getState() as RootState;
    const res: AxiosResponse = await doGetAPI(fileNumber, state.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doDelete = createAsyncThunk<any, number>(
  "all/doDelete",
  async (fileNumber, { getState }) => {
    const store = getState() as RootState;
    const res: AxiosResponse = await doDeleteAPI(fileNumber, store.login.token);
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const allSlice = createSlice<State, SliceCaseReducers<State>>({
  name: "all",
  initialState: {
    status: "none",
  },
  reducers: {
    setStatus(state, action) {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doDelete.fulfilled, (state, action) => {
        state.status = "success";
      })
      .addCase(doDelete.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doDelete.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doGet.fulfilled, (state, action) => {
        state.status = "success";
      })
      .addCase(doGet.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGet.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { setStatus } = allSlice.actions;

export default allSlice.reducer;
