import { doGetIcRiAPI, doPostIcRiAPI } from "./icRiAPI";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { SliceCaseReducers } from "@reduxjs/toolkit";
import type { AxiosResponse } from "axios";

// Empty Data
const emptyData = {
  fileDetailsId: 0,
  referralInfoId: 0,
  referral: "",
  agencyName: "",
  address: "",
  phone: "",
  email: "",
};

export interface icRiData {
  fileDetailsId: number;
  referralInfoId: number;
  referral: string;
  agencyName: string;
  address: string;
  phone: string;
  email: string;
}

export interface icRiState {
  data: icRiData;
  status: "failed" | "none" | "loading" | "success";
}

export const doGetIcRI = createAsyncThunk<icRiData, number>(
  "initialContactReferralInformation/doGetIcRI",
  async (initialContactID, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doGetIcRiAPI(
      initialContactID,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doPostIcRI = createAsyncThunk<icRiData, icRiData>(
  "initialContactReferralInformation/doPostIcRI",
  async (icRiFormData: icRiData, { getState }) => {
    const store: any = getState();
    const res: AxiosResponse = await doPostIcRiAPI(
      icRiFormData,
      store.login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const icReferralInformationSlice = createSlice<
  icRiState,
  SliceCaseReducers<icRiState>
>({
  name: "icReferralInformation",
  initialState: { data: emptyData, status: "failed" },
  reducers: {
    cleanIcRiState(state) {
      state = { data: emptyData, status: "none" };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doGetIcRI.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doGetIcRI.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doGetIcRI.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(doPostIcRI.fulfilled, (state, action) => {
        state.data = action.payload;
        state.status = "success";
      })
      .addCase(doPostIcRI.pending, (state) => {
        state.status = "loading";
      })
      .addCase(doPostIcRI.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { cleanIcRiState } = icReferralInformationSlice.actions;

export default icReferralInformationSlice.reducer;
