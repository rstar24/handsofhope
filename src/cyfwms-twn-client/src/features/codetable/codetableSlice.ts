import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { AxiosResponse } from "axios";
import {
  doGenderGetAPI,
  doGetMaritalStatusAPI,
  doGetRoleAPI,
} from "./codetableAPI";

export interface CodeTableData {
  gender: {};
  maritalstatus: {};
  role: {};
}

export interface CodeTableState {
  jwtToken: string;
  status: "failed" | "loading" | "success";
}

export const doGetGender = createAsyncThunk(
  "codetable/doGetGender",
  async (_, { dispatch, getState }) => {
    const res: AxiosResponse = await doGenderGetAPI(
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doGetMaritalStatus = createAsyncThunk(
  "codetable/doGetMaritalStatus",
  async (_, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetMaritalStatusAPI(
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const doGetRole = createAsyncThunk(
  "codetable/doGetRole",
  async (_, { dispatch, getState }) => {
    const res: AxiosResponse = await doGetRoleAPI(
      (getState() as any).login.jwtToken
    );
    // Becomes the `fulfilled` action payload:
    return res.data;
  }
);

export const CodeTableSlice = createSlice({
  name: "codetable",
  initialState: {
    gender: {},
    maritalstatus: {},
    role: {},
    jwtToken: "",
    status: "failed",
  },
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    //Gender
    builder.addCase(doGetGender.fulfilled, (state, action) => {
      try {
        state.gender = action.payload.valuesMap;
      } catch (err) {
        console.log(err);
      }
      state.status = "success";
    });
    builder.addCase(doGetGender.pending, (state) => {
      state.status = "loading";
    });
    builder.addCase(doGetGender.rejected, (state) => {
      state.status = "failed";
    });

    //maritalstatus
    builder.addCase(doGetMaritalStatus.fulfilled, (state, action) => {
      try {
        state.maritalstatus = action.payload.valuesMap;
      } catch (err) {
        console.log(err);
      }
      state.status = "success";
    });
    builder.addCase(doGetMaritalStatus.pending, (state) => {
      state.status = "loading";
    });
    builder.addCase(doGetMaritalStatus.rejected, (state) => {
      state.status = "failed";
    });

    //role
    builder.addCase(doGetRole.fulfilled, (state, action) => {
      try {
        state.maritalstatus = action.payload.valuesMap;
      } catch (err) {
        console.log(err);
      }
      state.status = "success";
    });
    builder.addCase(doGetRole.pending, (state) => {
      state.status = "loading";
    });
    builder.addCase(doGetRole.rejected, (state) => {
      state.status = "failed";
    });
  },
});

export const {} = CodeTableSlice.actions;

export default CodeTableSlice.reducer;
